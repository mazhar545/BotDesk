[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-09-04 16:38:48.511204",
  "module": "BotDesk",
  "name": "Measurement",
  "script": "// DocType: Sales Invoice\r\n\r\nfrappe.ui.form.on(\"Sales Invoice\", {\r\n  onload(frm) {\r\n    apply_item_row_queries(frm);\r\n    apply_parent_queries(frm);\r\n  },\r\n  refresh(frm) {\r\n    apply_item_row_queries(frm);\r\n    apply_parent_queries(frm);\r\n  },\r\n  customer(frm) {\r\n    // re-apply on customer change\r\n    apply_item_row_queries(frm);\r\n    apply_parent_queries(frm);\r\n\r\n    // optional: clear values that may belong to a different customer\r\n    frm.set_value(\"measurement\", null);\r\n    (frm.doc.items || []).forEach(d => {\r\n      d.measurement = null;\r\n      d.specification = null;\r\n    });\r\n    frm.refresh_field(\"items\");\r\n  }\r\n});\r\n\r\n// ----- Filters -----\r\nfunction apply_parent_queries(frm) {\r\n  const noCustomer = { filters: { name: \"__never__\" } };\r\n\r\n  if (frm.fields_dict.measurement) {\r\n    frm.set_query(\"measurement\", function () {\r\n      if (!frm.doc.customer) return noCustomer;\r\n      return {\r\n        filters: {\r\n          customer: frm.doc.customer\r\n          // , docstatus: 1   // uncomment if you only want submitted ones\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  // If you also added a parent-level \"specification\" field:\r\n  if (frm.fields_dict.specification) {\r\n    frm.set_query(\"specification\", function () {\r\n      if (!frm.doc.customer) return noCustomer;\r\n      return { filters: { customer: frm.doc.customer } };\r\n    });\r\n  }\r\n}\r\n\r\nfunction apply_item_row_queries(frm) {\r\n  const noCustomer = { filters: { name: \"__never__\" } };\r\n\r\n  // child: measurement\r\n  frm.fields_dict.items.grid.get_field(\"measurement\").get_query = function (doc, cdt, cdn) {\r\n    if (!doc.customer) return noCustomer;\r\n    return { filters: { customer: doc.customer } };\r\n  };\r\n\r\n  // child: specification\r\n  frm.fields_dict.items.grid.get_field(\"specification\").get_query = function (doc, cdt, cdn) {\r\n    if (!doc.customer) return noCustomer;\r\n    return { filters: { customer: doc.customer } };\r\n  };\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Specification",
  "enabled": 0,
  "modified": "2025-09-15 12:15:02.577265",
  "module": "BotDesk",
  "name": "Button Script",
  "script": "// Doctype: Specification — strict radio-style single select with async/await\r\n\r\nconst GROUPS = {\r\n  btn: [\r\n    { field: \"btn_small\",  value: \"Small\" },\r\n    { field: \"btn_large\",  value: \"Large\" },\r\n  ],\r\n  colour: [\r\n    { field: \"yellow_colour\", value: \"Yellow\" },\r\n    { field: \"white_colour\",  value: \"White\"  },\r\n  ],\r\n  // CUFF DESIGN -> writes to \"design\"\r\n  cuff_design: [\r\n    { field: \"round\",           value: \"Hidden\" },\r\n    { field: \"square\",          value: \"Round\" },\r\n    { field: \"angled_mitered\",  value: \"Beveled/Slanted\" },\r\n  ],\r\n  // COLLAR -> writes to hidden collar_design / collar_deign\r\n  collar: [\r\n    { field: \"band_chinese\",       value: \"Band / Chinese\" },\r\n    { field: \"nehru_collar\",       value: \"Nehru Collar\" },\r\n    { field: \"tab_collar\",         value: \"Tab Collar\" },\r\n    { field: \"button_down_collar\", value: \"Button Down Collar\" },\r\n    { field: \"wing_collar\",        value: \"Wing Collar\" }\r\n  ],\r\n};\r\n\r\nlet _lock = false;\r\n\r\nfrappe.ui.form.on(\"Specification\", {\r\n  async refresh(frm) {\r\n    await normalize_group(frm, \"btn\",     GROUPS.btn);\r\n    await normalize_group(frm, \"colour\",  GROUPS.colour);\r\n    await normalize_group(frm, \"design\",  GROUPS.cuff_design);\r\n    await normalize_group(frm, collarTarget(frm), GROUPS.collar);\r\n  },\r\n\r\n  // BTN\r\n  async btn_small(frm)  { await select_only(frm, \"btn\", GROUPS.btn, \"btn_small\"); },\r\n  async btn_large(frm)  { await select_only(frm, \"btn\", GROUPS.btn, \"btn_large\"); },\r\n\r\n  // COLOUR\r\n  async yellow_colour(frm) { await select_only(frm, \"colour\", GROUPS.colour, \"yellow_colour\"); },\r\n  async white_colour(frm)  { await select_only(frm, \"colour\", GROUPS.colour, \"white_colour\"); },\r\n\r\n  // CUFF DESIGN -> target is \"design\"\r\n  async round(frm)          { await select_only(frm, \"design\", GROUPS.cuff_design, \"round\"); },\r\n  async square(frm)         { await select_only(frm, \"design\", GROUPS.cuff_design, \"square\"); },\r\n  async angled_mitered(frm) { await select_only(frm, \"design\", GROUPS.cuff_design, \"angled_mitered\"); },\r\n\r\n  // COLLAR -> target is hidden collar_design / collar_deign\r\n  async band_chinese(frm)       { await select_only(frm, collarTarget(frm), GROUPS.collar, \"band_chinese\"); },\r\n  async nehru_collar(frm)       { await select_only(frm, collarTarget(frm), GROUPS.collar, \"nehru_collar\"); },\r\n  async tab_collar(frm)         { await select_only(frm, collarTarget(frm), GROUPS.collar, \"tab_collar\"); },\r\n  async button_down_collar(frm) { await select_only(frm, collarTarget(frm), GROUPS.collar, \"button_down_collar\"); },\r\n  async wing_collar(frm)        { await select_only(frm, collarTarget(frm), GROUPS.collar, \"wing_collar\"); },\r\n});\r\n\r\n// ---------- helpers ----------\r\n\r\n// Keep ONLY clicked checked; update target. Sequential awaits prevent races.\r\nasync function select_only(frm, targetField, group, clickedField) {\r\n  if (_lock) return;\r\n  _lock = true;\r\n  try {\r\n    // Turn others OFF sequentially\r\n    for (const g of group) {\r\n      if (g.field !== clickedField && frm.doc[g.field]) {\r\n        await frm.set_value(g.field, 0);\r\n      }\r\n    }\r\n    // Ensure clicked is ON\r\n    if (!frm.doc[clickedField]) {\r\n      await frm.set_value(clickedField, 1);\r\n    }\r\n    // Update target value\r\n    const choice = group.find(g => g.field === clickedField);\r\n    await frm.set_value(targetField, choice ? choice.value : null);\r\n  } finally {\r\n    _lock = false;\r\n  }\r\n}\r\n\r\n// On load: if exactly one is checked -> sync target; else clear all (no default kept)\r\nasync function normalize_group(frm, targetField, group) {\r\n  if (_lock) return;\r\n  _lock = true;\r\n  try {\r\n    const checked = group.filter(g => !!frm.doc[g.field]);\r\n\r\n    if (checked.length === 1) {\r\n      await frm.set_value(targetField, checked[0].value);\r\n    } else {\r\n      for (const g of group) {\r\n        if (frm.doc[g.field]) await frm.set_value(g.field, 0);\r\n      }\r\n      await frm.set_value(targetField, null);\r\n    }\r\n  } finally {\r\n    _lock = false;\r\n  }\r\n}\r\n\r\nfunction collarTarget(frm) {\r\n  if (frm.fields_dict && frm.fields_dict.collar_design) return \"collar_design\";\r\n  if (frm.fields_dict && frm.fields_dict.collar_deign)  return \"collar_deign\";\r\n  return \"collar_design\";\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-09-09 13:14:33.319172",
  "module": "BotDesk",
  "name": "order form btn",
  "script": "frappe.ui.form.on('Sales Invoice', {\r\n  async refresh(frm) {\r\n    if (frm.doc.docstatus !== 1 || frm.is_new()) return;\r\n\r\n    // helper: fetch rows and compute remaining count\r\n    async function fetch_rows() {\r\n      const { message: rows } = await frappe.call({\r\n        method: 'bot_desk.botdesk.doctype.order_form.order_form.get_sales_invoice_items',\r\n        args: { source_name: frm.doc.name }\r\n      });\r\n      return rows || [];\r\n    }\r\n\r\n    async function update_button() {\r\n      const rows = await fetch_rows();\r\n      const remaining = rows.filter(r => !r.disabled).length;\r\n\r\n      // remove prior btns on rerender\r\n      if (frm._of_btn && frm._of_btn.length) frm._of_btn.remove();\r\n\r\n      const label = remaining > 0\r\n        ? __('Order Form ({0} left)', [remaining])\r\n        : __('Order Form (0 left)');\r\n\r\n      frm._of_btn = frm.add_custom_button(label, async () => {\r\n        await open_dialog();      // always refetch when opening\r\n      }, __('Create'));\r\n\r\n      if (remaining === 0) {\r\n        frm._of_btn.addClass('disabled').attr('disabled', true).attr('title', __('All items converted'));\r\n      }\r\n    }\r\n\r\n    async function open_dialog() {\r\n      // REFETCH current state from DB so already-converted items are disabled\r\n      const rows = await fetch_rows();\r\n\r\n      if (!rows.length) {\r\n        frappe.msgprint(__('No items found in this Sales Invoice.'));\r\n        return;\r\n      }\r\n\r\n      const options = rows.map(r => ({\r\n        label: `${r.idx}. ${r.item_code || __('(No Item Code)')} — ${__('Qty')}: ${r.qty}`,\r\n        value: r.name,\r\n        disabled: !!r.disabled\r\n      }));\r\n\r\n      const d = new frappe.ui.Dialog({\r\n        title: __('Select items to create Order Forms'),\r\n        fields: [\r\n          { fieldtype: 'MultiCheck', fieldname: 'items', label: __('Items'), options }\r\n        ],\r\n        primary_action_label: __('Create'),\r\n        primary_action: async () => {\r\n          // MultiCheck returns an array of selected values (strings)\r\n          const selectedValues = (d.get_values().items || []).map(v => typeof v === 'string' ? v : v.value);\r\n\r\n          // ignore disabled ones defensively\r\n          const disabledSet = new Set(options.filter(o => o.disabled).map(o => o.value));\r\n          const picked = selectedValues.filter(v => !disabledSet.has(v));\r\n\r\n          if (!picked.length) {\r\n            frappe.msgprint(__('Please select at least one item.'));\r\n            return;\r\n          }\r\n\r\n          const { message: created } = await frappe.call({\r\n            method: 'bot_desk.botdesk.doctype.order_form.order_form.make_order_forms_from_sales_invoice',\r\n            args: {\r\n              source_name: frm.doc.name,\r\n              selected_child_names: JSON.stringify(picked)\r\n            }\r\n          });\r\n\r\n          d.hide();\r\n\r\n          if (!created || !created.length) {\r\n            frappe.msgprint(__('No Order Forms created. Either mapping failed or all selected items were already converted.'));\r\n          } else if (created.length === 1) {\r\n            frappe.set_route('Form', 'Order Form', created[0]);\r\n          } else {\r\n            const html = created\r\n              .map(n => `<li><a href=\"#Form/Order%20Form/${encodeURIComponent(n)}\">${frappe.utils.escape_html(n)}</a></li>`)\r\n              .join('');\r\n            frappe.msgprint({ title: __('Order Forms Created'), message: `<ul>${html}</ul>`, indicator: 'green' });\r\n          }\r\n\r\n          // After creating, refresh the button label/count for the NEXT click\r\n          await update_button();\r\n        }\r\n      });\r\n\r\n      d.show();\r\n    }\r\n\r\n    // View shortcut (optional)\r\n    if (frm._of_view_btn && frm._of_view_btn.length) frm._of_view_btn.remove();\r\n    frm._of_view_btn = frm.add_custom_button(__('Order Forms for this Invoice'), () => {\r\n      frappe.set_route('List', 'Order Form', { from_sales_invoice: frm.doc.name });\r\n    }, __('View'));\r\n\r\n    // initial render\r\n    await update_button();\r\n  }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Specification",
  "enabled": 1,
  "modified": "2025-09-15 15:23:42.447908",
  "module": "BotDesk",
  "name": "specification icon",
  "script": "// Client Script for Doctype: Specification — COLLAR (strict single-select, NO async/await)\r\n\r\n(function () {\r\n  // label -> field + image\r\n  var COLLAR = {\r\n    \"Regular Collar\":   { field: \"nehru_collar\",       img: \"/files/chinese.png\" },\r\n    \"Mandarin Collar\":  { field: \"tab_collar\",         img: \"/files/nehro.png\" },\r\n    \"Classic Collar 2\": { field: \"band_chinese\",       img: \"/files/tab%20clolor.png\" },\r\n    \"French Collar\":    { field: \"button_down_collar\", img: \"/files/btn%20down.png\" },\r\n    \"Classic Collar\":   { field: \"wing_collar\",        img: \"/files/Wing%20Collar.png\" }\r\n  };\r\n\r\n  var IMG_BG = \"#0b0b0c\";\r\n  var _busy = false;\r\n\r\n  function collarTarget(frm) {\r\n    if (frm.fields_dict && frm.fields_dict.collar_design) return \"collar_design\";\r\n    if (frm.fields_dict && frm.fields_dict.collar_deign)  return \"collar_deign\";\r\n    return \"collar_design\";\r\n  }\r\n\r\n  // helper that always returns a promise\r\n  function setVal(frm, field, value) {\r\n    var p = frm.set_value ? frm.set_value(field, value) : null;\r\n    if (p && typeof p.then === \"function\") return p;\r\n    return Promise.resolve();\r\n  }\r\n\r\n  // enforce ONLY the clicked checkbox is on; update target label\r\n  function select_only(frm, label) {\r\n    if (_busy) return;\r\n    _busy = true;\r\n\r\n    var target  = collarTarget(frm);\r\n    var clicked = COLLAR[label].field;\r\n\r\n    var chain = Promise.resolve();\r\n\r\n    Object.keys(COLLAR).forEach(function (lbl) {\r\n      var f = COLLAR[lbl].field;\r\n      if (f !== clicked && frm.doc[f]) {\r\n        chain = chain.then(function () { return setVal(frm, f, 0); });\r\n      }\r\n    });\r\n\r\n    chain = chain.then(function () {\r\n      if (!frm.doc[clicked]) return setVal(frm, clicked, 1);\r\n    });\r\n\r\n    chain = chain.then(function () {\r\n      return setVal(frm, target, label);\r\n    });\r\n\r\n    chain.then(function () { _busy = false; })\r\n         .catch(function () { _busy = false; });\r\n  }\r\n\r\n  // on load: if multiple are checked, keep first; sync label\r\n  function normalize_single(frm) {\r\n    if (_busy) return;\r\n    _busy = true;\r\n\r\n    var target = collarTarget(frm);\r\n    var checked = [];\r\n    Object.keys(COLLAR).forEach(function (lbl) {\r\n      if (frm.doc[COLLAR[lbl].field]) checked.push(lbl);\r\n    });\r\n\r\n    var chain = Promise.resolve();\r\n\r\n    if (checked.length > 1) {\r\n      var keep = checked[0];\r\n      Object.keys(COLLAR).forEach(function (lbl) {\r\n        chain = chain.then(function () {\r\n          return setVal(frm, COLLAR[lbl].field, lbl === keep ? 1 : 0);\r\n        });\r\n      });\r\n      chain = chain.then(function () { return setVal(frm, target, keep); });\r\n    } else if (checked.length === 1) {\r\n      chain = chain.then(function () { return setVal(frm, target, checked[0]); });\r\n    } else {\r\n      chain = chain.then(function () { return setVal(frm, target, null); });\r\n    }\r\n\r\n    chain.then(function () { _busy = false; })\r\n         .catch(function () { _busy = false; });\r\n  }\r\n\r\n  // render checkbox + icon row\r\n  function render_icons(frm) {\r\n    Object.keys(COLLAR).forEach(function (label) {\r\n      var cfg = COLLAR[label];\r\n      var f = frm.get_field(cfg.field);\r\n      if (!f || !f.$wrapper) return;\r\n\r\n      var $label = f.$wrapper.find(\".checkbox > label\");\r\n      if (!$label.length) return;\r\n\r\n      $label.css({ display: \"flex\", alignItems: \"center\", gap: \"10px\", lineHeight: \"1.2\" });\r\n\r\n      var $cb = $label.find('input[type=\"checkbox\"]');\r\n      $cb.css({ alignSelf: \"center\", margin: 0 });\r\n\r\n      if (!$label.find(\".collar-thumb\").length) {\r\n        var safeSrc = cfg.img.indexOf(\"%20\") > -1 ? cfg.img : encodeURI(cfg.img);\r\n        $cb.after(\r\n          '<span class=\"collar-thumb\" ' +\r\n            'style=\"display:inline-flex;align-items:center;justify-content:center;' +\r\n                   'width:100px;height:100px;border:1px solid #111;border-radius:10px;' +\r\n                   'background:' + IMG_BG + ';padding:6px;box-sizing:border-box;\">' +\r\n            '<img class=\"collar-img\" src=\"' + frappe.urllib.get_full_url(safeSrc) + '\" ' +\r\n                 'alt=\"' + frappe.utils.escape_html(label) + '\" ' +\r\n                 'style=\"display:block;max-width:100%;max-height:100%;object-fit:contain;\">' +\r\n          '</span>'\r\n        );\r\n      } else {\r\n        $label.find(\".collar-thumb\").css(\"background\", IMG_BG);\r\n      }\r\n    });\r\n  }\r\n\r\n  // bind events (no async keywords)\r\n  frappe.ui.form.on(\"Specification\", {\r\n    refresh: function (frm) {\r\n      render_icons(frm);\r\n      normalize_single(frm);\r\n      setTimeout(function () { render_icons(frm); }, 250);\r\n    },\r\n\r\n    nehru_collar:       function (frm) { select_only(frm, \"Regular Collar\");   },\r\n    tab_collar:         function (frm) { select_only(frm, \"Mandarin Collar\");  },\r\n    band_chinese:       function (frm) { select_only(frm, \"Classic Collar 2\"); },\r\n    button_down_collar: function (frm) { select_only(frm, \"French Collar\");    },\r\n    wing_collar:        function (frm) { select_only(frm, \"Classic Collar\");   }\r\n  });\r\n})();\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Specification",
  "enabled": 1,
  "modified": "2025-09-15 15:40:48.883681",
  "module": "BotDesk",
  "name": "Pocket Design Script",
  "script": "// Client Script: Specification — POCKET (strict single-select; no async/await)\r\n// Label-to-field mapping provided by you:\r\n//   Hidden  -> round\r\n//   Round   -> square\r\n//   Beveled/Slanted -> angled_mitered\r\n(function () {\r\n  var IMG_BG = \"#0b0b0c\";\r\n  var _busy = false;\r\n\r\n  var POCKET = {\r\n    \"Hidden\":            { field: \"round\",           img: \"/files/square%20pocket.png\"  },\r\n    \"Round\":             { field: \"square\",          img: \"/files/rounded%20pocket.png\" },\r\n    \"Beveled/Slanted\":   { field: \"angled_mitered\",  img: \"/files/angled%20pocket.png\"  }\r\n  };\r\n\r\n  function setVal(frm, field, value) {\r\n    var p = frm.set_value ? frm.set_value(field, value) : null;\r\n    return (p && typeof p.then === \"function\") ? p : Promise.resolve();\r\n  }\r\n\r\n  function select_only(frm, label) {\r\n    if (_busy) return;\r\n    _busy = true;\r\n\r\n    var clicked = POCKET[label].field;\r\n    var chain = Promise.resolve();\r\n\r\n    // turn others OFF\r\n    Object.keys(POCKET).forEach(function (lbl) {\r\n      var f = POCKET[lbl].field;\r\n      if (f !== clicked && frm.doc[f]) {\r\n        chain = chain.then(function () { return setVal(frm, f, 0); });\r\n      }\r\n    });\r\n\r\n    // ensure clicked ON\r\n    chain = chain.then(function () {\r\n      if (!frm.doc[clicked]) return setVal(frm, clicked, 1);\r\n    });\r\n\r\n    // write chosen label to Data field \"design\"\r\n    chain = chain.then(function () { return setVal(frm, \"design\", label); });\r\n\r\n    chain.then(function () { _busy = false; })\r\n         .catch(function () { _busy = false; });\r\n  }\r\n\r\n  function normalize_single(frm) {\r\n    if (_busy) return;\r\n    _busy = true;\r\n\r\n    var checked = [];\r\n    Object.keys(POCKET).forEach(function (lbl) {\r\n      if (frm.doc[POCKET[lbl].field]) checked.push(lbl);\r\n    });\r\n\r\n    var chain = Promise.resolve();\r\n    if (checked.length > 1) {\r\n      var keep = checked[0];\r\n      Object.keys(POCKET).forEach(function (lbl) {\r\n        chain = chain.then(function () {\r\n          return setVal(frm, POCKET[lbl].field, lbl === keep ? 1 : 0);\r\n        });\r\n      });\r\n      chain = chain.then(function () { return setVal(frm, \"design\", keep); });\r\n    } else if (checked.length === 1) {\r\n      chain = chain.then(function () { return setVal(frm, \"design\", checked[0]); });\r\n    } else {\r\n      chain = chain.then(function () { return setVal(frm, \"design\", null); });\r\n    }\r\n\r\n    chain.then(function () { _busy = false; })\r\n         .catch(function () { _busy = false; });\r\n  }\r\n\r\n  function render_icons(frm) {\r\n    Object.keys(POCKET).forEach(function (label) {\r\n      var cfg = POCKET[label];\r\n      var f = frm.get_field(cfg.field);\r\n      if (!f || !f.$wrapper) return;\r\n\r\n      var $label = f.$wrapper.find(\".checkbox > label\");\r\n      if (!$label.length) return;\r\n\r\n      $label.css({ display: \"flex\", alignItems: \"center\", gap: \"10px\", lineHeight: \"1.2\" });\r\n      var $cb = $label.find('input[type=\"checkbox\"]');\r\n      $cb.css({ alignSelf: \"center\", margin: 0 });\r\n\r\n      if (!$label.find(\".pocket-thumb\").length) {\r\n        var safeSrc = cfg.img.indexOf(\"%20\") > -1 ? cfg.img : encodeURI(cfg.img);\r\n        $cb.after(\r\n          '<span class=\"pocket-thumb\" ' +\r\n            'style=\"display:inline-flex;align-items:center;justify-content:center;' +\r\n                   'width:100px;height:100px;border:1px solid #111;border-radius:10px;' +\r\n                   'background:' + IMG_BG + ';padding:6px;box-sizing:border-box;\">' +\r\n            '<img class=\"pocket-img\" src=\"' + frappe.urllib.get_full_url(safeSrc) + '\" ' +\r\n                 'alt=\"' + frappe.utils.escape_html(label) + '\" ' +\r\n                 'style=\"display:block;max-width:100%;max-height:100%;object-fit:contain;\">' +\r\n          '</span>'\r\n        );\r\n      } else {\r\n        $label.find(\".pocket-thumb\").css(\"background\", IMG_BG);\r\n      }\r\n    });\r\n  }\r\n\r\n  frappe.ui.form.on(\"Specification\", {\r\n    refresh: function (frm) {\r\n      render_icons(frm);\r\n      normalize_single(frm);\r\n      setTimeout(function () { render_icons(frm); }, 250);\r\n    },\r\n\r\n    // Map checkbox events to the labels you want saved in \"design\"\r\n    round:          function (frm) { select_only(frm, \"Hidden\"); },\r\n    square:         function (frm) { select_only(frm, \"Round\"); },\r\n    angled_mitered: function (frm) { select_only(frm, \"Beveled/Slanted\"); }\r\n  });\r\n})();\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Specification",
  "enabled": 1,
  "modified": "2025-09-12 13:00:00.245484",
  "module": "BotDesk",
  "name": "Culf Design Script",
  "script": "// Files you uploaded:\r\n//  - /files/culf_plan.png\r\n//  - /files/cuff_single_button.png\r\n//  - /files/cuff_double_button.png\r\n//  - /files/cuff_french.png\r\n\r\n(() => {\r\n  const CUFFS = {\r\n    \"Plain Cuff\":       { field: \"cuff_plain\",          img: \"/files/culf_plan.png\" },\r\n    \"Plain Open Cuff\": { field: \"cuff_single_button\",  img: \"/files/cuff_single_button.png\" },\r\n    \"Formal Cufflinks\": { field: \"cuff_double_button\",  img: \"/files/cuff_double_button.png\" },\r\n    \"French Cufflinks\":     { field: \"cuff_french\",         img: \"/files/cuff_french.png\" }\r\n  };\r\n\r\n  const CUFF_IMG_BG = \"#0b0b0c\";\r\n  let _busy = false;\r\n\r\n  frappe.ui.form.on(\"Specification\", {\r\n    async refresh(frm) {\r\n      render_icons(frm);\r\n      await normalize_single(frm);      // if multiple → keep first; sync btn\r\n      setTimeout(() => render_icons(frm), 250);\r\n    },\r\n\r\n    // Enforce ONE selected on click (sequential, race-free)\r\n    async cuff_plain(frm)          { await select_only(frm, \"Plain Cuff\"); },\r\n    async cuff_single_button(frm)  { await select_only(frm, \"Plain Open Cuff\"); },\r\n    async cuff_double_button(frm)  { await select_only(frm, \"Formal Cufflinks\"); },\r\n    async cuff_french(frm)         { await select_only(frm, \"French Cufflinks\"); },\r\n  });\r\n\r\n  async function select_only(frm, label) {\r\n    if (_busy) return;\r\n    _busy = true;\r\n    try {\r\n      const entries = Object.entries(CUFFS);\r\n      const clicked = CUFFS[label].field;\r\n\r\n      // Turn others OFF sequentially (await prevents races)\r\n      for (const [_, cfg] of entries) {\r\n        if (cfg.field !== clicked && frm.doc[cfg.field]) {\r\n          await frm.set_value(cfg.field, 0);\r\n        }\r\n      }\r\n      // Ensure clicked is ON\r\n      if (!frm.doc[clicked]) {\r\n        await frm.set_value(clicked, 1);\r\n      }\r\n      // Store chosen label in Data field \"btn\"\r\n      await frm.set_value(\"btn\", label);\r\n    } finally {\r\n      _busy = false;\r\n    }\r\n  }\r\n\r\n  async function normalize_single(frm) {\r\n    if (_busy) return;\r\n    _busy = true;\r\n    try {\r\n      const entries = Object.entries(CUFFS);\r\n      const checked = entries.filter(([_, cfg]) => !!frm.doc[cfg.field]);\r\n\r\n      if (checked.length > 1) {\r\n        const keepLabel = checked[0][0];\r\n        for (const [label, cfg] of entries) {\r\n          if (label !== keepLabel && frm.doc[cfg.field]) {\r\n            await frm.set_value(cfg.field, 0);\r\n          }\r\n        }\r\n        await frm.set_value(\"btn\", keepLabel);\r\n      } else if (checked.length === 1) {\r\n        await frm.set_value(\"btn\", checked[0][0]);\r\n      } else {\r\n        // none selected\r\n        await frm.set_value(\"btn\", null);\r\n      }\r\n    } finally {\r\n      _busy = false;\r\n    }\r\n  }\r\n\r\n  // Icon renderer (same alignment as collars)\r\n  function render_icons(frm) {\r\n    Object.entries(CUFFS).forEach(([label, cfg]) => {\r\n      const f = frm.get_field(cfg.field);\r\n      if (!f || !f.$wrapper) return;\r\n\r\n      const $label = f.$wrapper.find(\".checkbox > label\");\r\n      if (!$label.length) return;\r\n\r\n      $label.css({ display: \"flex\", alignItems: \"center\", gap: \"10px\", lineHeight: \"1.2\" });\r\n      const $cb = $label.find('input[type=\"checkbox\"]');\r\n      $cb.css({ alignSelf: \"center\", margin: \"0\" });\r\n\r\n      if (!$label.find(\".cuff-thumb\").length) {\r\n        const safeSrc = cfg.img.includes(\"%20\") ? cfg.img : encodeURI(cfg.img);\r\n        $cb.after(`\r\n          <span class=\"cuff-thumb\"\r\n                style=\"display:inline-flex;align-items:center;justify-content:center;\r\n                       width:100px;height:100px;border:1px solid #111;border-radius:10px;\r\n                       background:${CUFF_IMG_BG};padding:6px;box-sizing:border-box;\">\r\n            <img class=\"cuff-img\"\r\n                 src=\"${frappe.urllib.get_full_url(safeSrc)}\"\r\n                 alt=\"${frappe.utils.escape_html(label)}\"\r\n                 style=\"display:block;max-width:100%;max-height:100%;object-fit:contain;\">\r\n          </span>\r\n        `);\r\n      } else {\r\n        $label.find(\".cuff-thumb\").css(\"background\", CUFF_IMG_BG);\r\n      }\r\n    });\r\n  }\r\n})();\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Specification",
  "enabled": 1,
  "modified": "2025-09-12 09:34:02.538559",
  "module": "BotDesk",
  "name": "Placket Script Design",
  "script": "// Placket Design — icons + STRICT single-select → writes label to Data field \"colour\"\r\n(() => {\r\n  const TARGET_FIELD = \"colour\"; // <- per your note\r\n\r\n  const PLAK = {\r\n    \"Visible Square Tab\": { field: \"placket_button_straight\", img: \"/files/placket_button_straight.png\" },\r\n    \"Visible Triangle Tab\":  { field: \"placket_button_pointed\",  img: \"/files/placket_button_pointed.png\"  },\r\n    \"Hidden Square Tab\":    { field: \"placket_plain_straight\",  img: \"/files/placket_plain_straight.png\"  },\r\n    \"Hidden Triangle Tab\":     { field: \"placket_plain_pointed\",   img: \"/files/placket_plain_pointed.png\"   },\r\n    \"Zipper with Square Tab\":   { field: \"placket_zip_straight\",    img: \"/files/placket_zip_straight.png\"    },\r\n    \"Zipper with Triangular Tab\":    { field: \"placket_zip_pointed\",     img: \"/files/placket_zip_pointed.png\"     },\r\n  };\r\n\r\n  const IMG_BG = \"#0b0b0c\";\r\n  let _busy = false;\r\n\r\n  frappe.ui.form.on(\"Specification\", {\r\n    async refresh(frm) {\r\n      render_icons(frm);\r\n      await normalize_single(frm);\r\n      setTimeout(() => render_icons(frm), 250);\r\n    },\r\n\r\n    // Bind each checkbox to enforce single-select\r\n    placket_button_straight(frm){ select_only(frm, \"Visible Square Tab\"); },\r\n    placket_button_pointed(frm) { select_only(frm, \"Visible Triangle Tab\");  },\r\n    placket_plain_straight(frm) { select_only(frm, \"Hidden Square Tab\");    },\r\n    placket_plain_pointed(frm)  { select_only(frm, \"Hidden Triangle Tab\");     },\r\n    placket_zip_straight(frm)   { select_only(frm, \"Zipper with Square Tab\");   },\r\n    placket_zip_pointed(frm)    { select_only(frm, \"Zipper with Triangular Tab\");    },\r\n  });\r\n\r\n  async function select_only(frm, label) {\r\n    if (_busy) return;\r\n    _busy = true;\r\n    try {\r\n      const entries = Object.entries(PLAK);\r\n      const clicked = PLAK[label].field;\r\n\r\n      // Turn others OFF sequentially (prevents races)\r\n      for (const [_, cfg] of entries) {\r\n        if (cfg.field !== clicked && frm.doc[cfg.field]) {\r\n          await frm.set_value(cfg.field, 0);\r\n        }\r\n      }\r\n      // Ensure clicked is ON\r\n      if (!frm.doc[clicked]) await frm.set_value(clicked, 1);\r\n\r\n      // Save chosen label\r\n      await frm.set_value(TARGET_FIELD, label);\r\n    } finally { _busy = false; }\r\n  }\r\n\r\n  async function normalize_single(frm) {\r\n    if (_busy) return;\r\n    _busy = true;\r\n    try {\r\n      const entries = Object.entries(PLAK);\r\n      const checked = entries.filter(([_, cfg]) => !!frm.doc[cfg.field]);\r\n\r\n      if (checked.length > 1) {\r\n        const keep = checked[0][0];\r\n        for (const [label, cfg] of entries) {\r\n          if (label !== keep && frm.doc[cfg.field]) await frm.set_value(cfg.field, 0);\r\n        }\r\n        await frm.set_value(TARGET_FIELD, keep);\r\n      } else if (checked.length === 1) {\r\n        await frm.set_value(TARGET_FIELD, checked[0][0]);\r\n      } else {\r\n        await frm.set_value(TARGET_FIELD, null);\r\n      }\r\n    } finally { _busy = false; }\r\n  }\r\n\r\n  function render_icons(frm) {\r\n    Object.entries(PLAK).forEach(([label, cfg]) => {\r\n      const f = frm.get_field(cfg.field);\r\n      if (!f || !f.$wrapper) return;\r\n\r\n      const $label = f.$wrapper.find(\".checkbox > label\");\r\n      if (!$label.length) return;\r\n\r\n      $label.css({ display: \"flex\", alignItems: \"center\", gap: \"10px\", lineHeight: \"1.2\" });\r\n      const $cb = $label.find('input[type=\"checkbox\"]');\r\n      $cb.css({ alignSelf: \"center\", margin: \"0\" });\r\n\r\n      if (!$label.find(\".plak-thumb\").length) {\r\n        const safeSrc = cfg.img.includes(\"%20\") ? cfg.img : encodeURI(cfg.img);\r\n        $cb.after(`\r\n          <span class=\"plak-thumb\"\r\n                style=\"display:inline-flex;align-items:center;justify-content:center;\r\n                       width:100px;height:100px;border:1px solid #111;border-radius:10px;\r\n                       background:${IMG_BG};padding:6px;box-sizing:border-box;\">\r\n            <img class=\"plak-img\"\r\n                 src=\"${frappe.urllib.get_full_url(safeSrc)}\"\r\n                 alt=\"${frappe.utils.escape_html(label)}\"\r\n                 style=\"display:block;max-width:100%;max-height:100%;object-fit:contain;\">\r\n          </span>\r\n        `);\r\n      } else {\r\n        $label.find(\".plak-thumb\").css(\"background\", IMG_BG);\r\n      }\r\n    });\r\n  }\r\n})();\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Measurement",
  "enabled": 1,
  "modified": "2025-09-16 11:06:06.906672",
  "module": "BotDesk",
  "name": "Measurement Customer",
  "script": "// Doctype: Measurement\r\n// Row-wise Tab across your rows (no toasts)\r\n\r\n(() => {\r\n  // Left → Right order (Row 1…n)\r\n  const ORDER = [\r\n    // Row 1\r\n    \"height\",\r\n    \"the_shoulder\",\r\n    \"plain_sleeve_length\",\r\n    \"cuff_sleeve_length_4\",\r\n\r\n    // Row 2\r\n    \"quantum_expansion_5\", // Sleeve Length (French Cuff)\r\n    \"middle_6\",            // Upper Arm Width\r\n    \"neck_7\",              // Mid Arm Width\r\n    \"step_8\",              // Wrist Width\r\n\r\n    // Row 3\r\n    \"collar_type_10\",\r\n    \"item_9\",\r\n    \"plain_sleeve_length_3\",\r\n    \"embroidery\",\r\n\r\n    // Row 4\r\n    \"cbc\",\r\n    \"chest_pocket_type_11\",\r\n    \"hem_width\",\r\n    \"collar_size\",\r\n\r\n    // Row 5 (two fields)\r\n    \"sleeve_hem_width\",\r\n    \"bottom_hem_width\",\r\n  ];\r\n\r\n  function getInput(frm, fname) {\r\n    const ctrl = frm.fields_dict[fname];\r\n    if (!ctrl) return null;\r\n    if (ctrl.$input && ctrl.$input.length) return ctrl.$input.get(0);\r\n    const wrap = ctrl.$wrapper && ctrl.$wrapper.get && ctrl.$wrapper.get(0);\r\n    return wrap ? wrap.querySelector(\"input, textarea, select\") : null;\r\n  }\r\n\r\n  function isInteractive(frm, fname) {\r\n    const ctrl = frm.fields_dict[fname];\r\n    if (!ctrl) return false;\r\n    if (ctrl.df.hidden || ctrl.df.read_only) return false;\r\n    const wrap = ctrl.$wrapper && ctrl.$wrapper.get && ctrl.$wrapper.get(0);\r\n    if (!wrap || wrap.offsetParent === null) return false;\r\n    return !!getInput(frm, fname);\r\n  }\r\n\r\n  function bindOnce(frm) {\r\n    if (frm.wrapper._rowTabBound) return;\r\n    frm.wrapper._rowTabBound = true;\r\n\r\n    const handler = (ev) => {\r\n      if (ev.key !== \"Tab\") return;\r\n\r\n      const holder = ev.target.closest?.(\"[data-fieldname]\");\r\n      const current = holder?.getAttribute(\"data-fieldname\");\r\n      const idx = ORDER.indexOf(current);\r\n      if (idx === -1) return;\r\n\r\n      ev.preventDefault();\r\n      ev.stopPropagation();\r\n      ev.stopImmediatePropagation?.();\r\n\r\n      const dir = ev.shiftKey ? -1 : 1;\r\n      let j = idx + dir;\r\n\r\n      while (j >= 0 && j < ORDER.length) {\r\n        const next = ORDER[j];\r\n        if (isInteractive(frm, next)) {\r\n          const el = getInput(frm, next);\r\n          if (el) {\r\n            setTimeout(() => { el.focus(); el.select?.(); }, 0);\r\n            return;\r\n          }\r\n        }\r\n        j += dir;\r\n      }\r\n      // if no next editable field, do nothing\r\n    };\r\n\r\n    // Capture phase so we override default vertical tabbing\r\n    frm.wrapper.addEventListener(\"keydown\", handler, true);\r\n  }\r\n\r\n  frappe.ui.form.on(\"Measurement\", {\r\n    onload_post_render(frm) { bindOnce(frm); },\r\n    refresh(frm)            { bindOnce(frm); },\r\n  });\r\n})();\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Specification",
  "enabled": 1,
  "modified": "2025-09-16 12:37:59.603476",
  "module": "BotDesk",
  "name": "btn on Specification Form",
  "script": "// Doctype: Specification\r\nfrappe.ui.form.on(\"Specification\", {\r\n  refresh(frm) {\r\n    if (frm.__add_meas_btn) return;\r\n\r\n    const $btn = frm.add_custom_button(__(\"Add Measurement\"), () => {\r\n      frappe.route_options = {\r\n        customer: frm.doc.customer || \"\",\r\n        customer_email: frm.doc.customer_email || \"\",\r\n        customer_mobile: frm.doc.customer_mobile || \"\",\r\n        measurement_name: frm.doc.measurement_name || \"\",\r\n      };\r\n      frappe.new_doc(\"Measurement\");\r\n    });\r\n\r\n    if ($btn) {\r\n      // strip any existing color and make it black\r\n      $btn.removeClass(\"btn-default btn-secondary btn-success btn-primary btn-info btn-warning btn-danger\");\r\n      $btn.addClass(\"btn-dark\"); // works if your theme has it\r\n      // hard style to ensure solid black even if .btn-dark isn't present\r\n      $btn.css({ backgroundColor: \"#000\", borderColor: \"#000\", color: \"#fff\" });\r\n\r\n      // optional: place at far-left in the header action row\r\n      try { $btn.prependTo(frm.page.page_actions); } catch (e) {}\r\n    }\r\n\r\n    frm.__add_meas_btn = true;\r\n  },\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Measurement",
  "enabled": 1,
  "modified": "2025-09-16 12:36:55.982923",
  "module": "BotDesk",
  "name": "btn on measuremnt form",
  "script": "// Doctype: Measurement\r\nfrappe.ui.form.on(\"Measurement\", {\r\n  refresh(frm) {\r\n    if (frm.__add_spec_btn) return;\r\n\r\n    const $btn = frm.add_custom_button(__(\"Add Specification\"), () => {\r\n      frappe.route_options = {\r\n        customer: frm.doc.customer || \"\",\r\n        customer_email: frm.doc.customer_email || \"\",\r\n        customer_mobile: frm.doc.customer_mobile || \"\",\r\n        measurement_name: frm.doc.measurement_name || \"\",\r\n        // measurement: frm.doc.name   // uncomment if you want to auto-link back\r\n      };\r\n      frappe.new_doc(\"Specification\");\r\n    });\r\n\r\n    if ($btn) {\r\n      // remove any prior color classes\r\n      $btn.removeClass(\"btn-default btn-secondary btn-success btn-primary btn-info btn-warning btn-danger\");\r\n\r\n      // Try Bootstrap's dark (exists in BS4/5); harmless if not present\r\n      $btn.addClass(\"btn-dark\");\r\n\r\n      // Hard-set colors so it looks black even if .btn-dark doesn't exist\r\n      $btn.css({\r\n        backgroundColor: \"#000\",\r\n        borderColor: \"#000\",\r\n        color: \"#fff\"\r\n      });\r\n\r\n      // optional: move leftmost in header actions\r\n      try { $btn.prependTo(frm.page.page_actions); } catch (e) {}\r\n    }\r\n\r\n    frm.__add_spec_btn = true;\r\n  },\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Measurement",
  "enabled": 1,
  "modified": "2025-09-16 13:29:25.080069",
  "module": "BotDesk",
  "name": "Customer Auto Fetch Measurement form",
  "script": "frappe.ui.form.on('Measurement', {\r\n  customer(frm) {\r\n    // auto-fill measurement if empty\r\n    if (frm.doc.customer && !frm.doc.measurement) {\r\n      frm.set_value('measurement_name', frm.doc.customer);\r\n    }\r\n  }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Specification",
  "enabled": 1,
  "modified": "2025-09-16 13:32:26.575822",
  "module": "BotDesk",
  "name": "Customer Auto Fetch Specification",
  "script": "frappe.ui.form.on('Specification', {\r\n  customer(frm) {\r\n    // auto-fill measurement if empty\r\n    if (frm.doc.customer && !frm.doc.measurement) {\r\n      frm.set_value('measurement_name', frm.doc.customer);\r\n    }\r\n  }\r\n});\r\n",
  "view": "Form"
 }
]